
let skip_defaults_vim=1   " don't source it in anycase
set runtimepath^=~/vim/basic
set runtimepath+=~/vim/basic/after

"""""""""""""""""""""""""""""""""
" defaults.vim
" needed if using with config file that is located not in ~/.vim/
" in that case $VIMRUNTIME/defaults.vim is not sourced
set nocompatible
set backspace=indent,eol,start
set history=200
set showcmd
set wildmenu
set ttimeout
set ttimeoutlen=50    " keycode delay from the terminal
set display=lastline,truncate   " show as much as possible of the last line
set scrolloff=2 
set sidescroll=1
set sidescrolloff=2
set nrformats-=octal  " don't apply Ctrl-A and Ctrl-X to octal numbers
" Prevent that the langmap options applies to characters that result a mapping
set nolangremap

filetype plugin indent on
syntax enable

" Don't use Q for Ex mode, use it for macro repeat. Except for Select mode.
map Q @@
sunmap Q

" CTRL-U in insert mode delets a lot
inoremap <C-U> <C-G>u<C-U>

" Put these in an autocmd group, so that you can revert them with:
":augroup vimStartup | exe 'au!' | augroup END"
augroup vimStartup
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid, when inside an event handler
  " (happens when dropping a file on gvim) and for a commit message (it's
  " likely a different one than last time).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif
augroup END

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
          \ | wincmd p | diffthis
endif

" End of defaults.vim
"""""""""""""""""""""""""""""""""
filetype plugin indent on
syntax on

set hidden
set hlsearch incsearch
"set ignorecase smartcase
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab shiftround
set smarttab
set autoindent smartindent
set complete-=i
set path=.,**
set wildignorecase
set wildmode=longest:list,full
set wildignore=*.swp,*.bak,*.cache,tags,.tags
set wildignore+=*.o,*.pyc,*.so,*.mht,*.tar.*,*/.git/*,*/.cache/*,*/build/*
set tags=./tags;,./.tags;   "the semicolon tells to search parent dirs also
set noswapfile nobackup noundofile
set nu
set mouse=a 
set completeopt=menu
set showbreak=>>
set lazyredraw      "don't update screen in the middle of macro execution

set foldcolumn=1
"set foldlevelstart=99
"set foldlevel=indent

set laststatus=2
set statusline=%f%m%=
set statusline+=\ %y\ %c%V\,%3l\/%L\ %2P

if executable('ag')
  set grepprg=ag\ --vimgrep\ $*
  set grepformat=%f:%l:%c:%m
else
  set grepprg=grep\ -inrsIH\ --exclude-dir='.git'
endif

set gdefault

" taken from here: 
" https://github.com/mhinz/vim-galore/blob/master/static/minimal-vimrc.vim
set list          " Show non-printable characters.
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

" Plugins / Colors
"""""""""""""""""""""""""""""""""
call plug#begin()
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-unimpaired'
Plug 'godlygeek/tabular'
" Plug 'tpope/vim-surround'
" Plug 'justinmk/vim-sneak'
Plug 'romainl/vim-qf'
call plug#end()

runtime! macros/matchit.vim
runtime ftplugin/man.vim

if has("gui_running")
    set background=dark
    colorscheme habamax
    " let g:onedark_terminal_italics = 0
    " colorscheme onedark

    "set background=light
    "colorscheme PaperColor

    set guifont=DejaVu\ Sans\ Mono\ 12
    set lines=40 columns=120
    set guioptions=
else
    set background=dark
    colorscheme habamax
endif


"markdown - disable error syntax
hi link markdownError Normal
autocmd FileType markdown setlocal conceallevel=2
autocmd FileType markdown :nnoremap <leader>h :g/^#/<CR>
"""""""""""""""""""""""""""""""""

"navigate around window splits with single key combo
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-l> :wincmd l<CR>

nnoremap Y  y$
nnoremap s  :w<CR>
nnoremap ' `
" Close current buffer but keep window open
nnoremap <F2> :b#<bar>bd#<CR>

let mapleader=" "

"find file relatively to location of current file
nnoremap <leader>f :find %:h/**/*
nnoremap <leader>V :vimgrep //j %<bar>cw<S-Left><S-Left><Right>
nnoremap <leader>v :vimgrep //j **/*<bar>cw<S-Left><S-Left><Right>
nnoremap <leader>G :grep!  %<bar>cw<S-left><Left>
nnoremap <leader>g :grep!  <bar>cw<S-left><Left>

let g:qf_auto_resize = 0
let g:qf_mapping_ack_style = 1
"let g:qf_nowrap = 0  "default: g:qf_nowrap = 1
nnoremap <leader>q <Plug>(qf_qf_toggle)
lnoremap <leader>l <Plug>(qf_loc_toggle)


