
let skip_defaults_vim=1   " don't source it in anycase
"set runtimepath^=~/vim/devel
"set runtimepath+=~/vim/devel/after

"""""""""""""""""""""""""""""""""
" defaults.vim
" needed if using with config file that is located not in ~/.vim/
" in that case $VIMRUNTIME/defaults.vim is not sourced
set nocompatible
set backspace=indent,eol,start
set history=200
set showcmd
set wildmenu
set ttimeout
set ttimeoutlen=50    " keycode delay from the terminal
set display=lastline,truncate   " show as much as possible of the last line
set scrolloff=2 
set sidescroll=1
set sidescrolloff=2
set nrformats-=octal  " don't apply Ctrl-A and Ctrl-X to octal numbers
" Prevent that the langmap options applies to characters that result a mapping
set nolangremap

filetype plugin indent on
syntax enable

" Don't use Q for Ex mode, use it for macro repeat. Except for Select mode.
map Q @@
sunmap Q

" CTRL-U in insert mode delets a lot
inoremap <C-U> <C-G>u<C-U>

" Put these in an autocmd group, so that you can revert them with:
":augroup vimStartup | exe 'au!' | augroup END"
augroup vimStartup
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid, when inside an event handler
  " (happens when dropping a file on gvim) and for a commit message (it's
  " likely a different one than last time).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif
augroup END

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
          \ | wincmd p | diffthis
endif

" End of defaults.vim
"""""""""""""""""""""""""""""""""
filetype plugin indent on
syntax on

set hidden
set autoread
set hlsearch incsearch
set ignorecase smartcase
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab shiftround
set smarttab
set autoindent smartindent
set complete-=i
set path=.,**
set wildignorecase
set wildmode=longest:list,full
set wildignore=*.swp,*.bak,*.cache,tags,.tags
set wildignore+=*.o,*.pyc,*.so,*.mht,*.tar.*,*/.git/*,*/.cache/*,*/build/*
set tags=./tags;,./.tags;   "the semicolon tells to search parent dirs also
set noswapfile nobackup noundofile
set nu
set mouse=a 
set completeopt=menu
set linebreak
set showbreak=↪
set lazyredraw      "don't update screen in the middle of macro execution
set shortmess+=I    "disable intro screen
set showmatch matchtime=2
set nostartofline
set nospell spelllang=en,de,ru,he

"set foldcolumn=1
set foldmethod=indent foldminlines=4 foldnestmax=3 nofoldenable

autocmd Bufenter Makefile.inc set ft=make

set laststatus=2
set statusline=%f%m%=
set statusline+=\ %y\ %c%V\,%3l\/%L\ %2P

if executable('ag')
    set grepprg=ag\ --vimgrep\ $*
    set grepformat=%f:%l:%c:%m
elseif executable('git')
    set grepprg=git\ grep\ --untracked\ -iIn\ $*
else
    set grepprg=grep\ -inrsIH\ --exclude-dir='.git'
endif

set gdefault

" taken from here: 
" https://github.com/mhinz/vim-galore/blob/master/static/minimal-vimrc.vim
set list          " Show non-printable characters.
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:·,trail:·'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.,trail:.'
endif

" Plugins / Colors
"""""""""""""""""""""""""""""""""
call plug#begin()
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'godlygeek/tabular'
"Plug 'tpope/vim-vinegar'
Plug 'justinmk/vim-dirvish'
"Plug 'vifm/vifm.vim'
" Plug 'tpope/vim-surround'
" Plug 'justinmk/vim-sneak'
Plug 'Yggdroot/indentLine'
"Plug 'yegappan/lsp'
"Plug 'https://git.sr.ht/~ackyshake/VimCompletesMe.vim'

" Syntax and folding
" Plug 'preservim/vim-markdown'
Plug 'bfrg/vim-cpp-modern'
Plug 'tmhedberg/SimpylFold'             " folding for python
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'vim-python/python-syntax'

" Colors
Plug 'junegunn/seoul256.vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'joshdick/onedark.vim'
call plug#end()

runtime! macros/matchit.vim
runtime ftplugin/man.vim
set keywordprg=:Man

if has("gui_running")
    set lines=40 columns=120
    set guioptions=
    set guicursor+=a:blinkon0
    "set guifont=DejaVu\ Sans\ Mono\ 11
    set guifont=Monospace\ 13

    tnoremap <S-Insert> <C-W>"+
    tnoremap <Esc> <C-\><C-n>

    " set background=dark
    "colorscheme habamax
    "let g:onedark_terminal_italics = 0 | colorscheme onedark
    " let g:seoul256_background=236 | colorscheme seoul256

    set background=light
    "colorscheme zenburn
    "colorscheme PaperColor
    let g:seoul256_background=254 | colorscheme seoul256-light

    " termainal solarized colors
    let g:terminal_ansi_colors = [
                \'#282828', '#CC241D', '#98971A', '#D79921',
                \'#458588', '#B16286', '#689D6A', '#D65D0E',
                \'#fb4934', '#b8bb26', '#fabd2f', '#83a598',
                \'#d3869b', '#8ec07c', '#fe8019', '#FBF1C7' ]

    " terminal seoul colors
    " let g:terminal_ansi_colors = [
    "             \'#4E4E4E', '#626262', '#D68787', '#D75F87',
    "             \'#5F865F', '#87AF87', '#D8AF5F', '#FFD787',
    "             \'#85ADD4', '#ADD4FB', '#D7AFAF', '#FFAFAF',
    "             \'#87AFAF', '#87D7D7', '#D0D0D0', '#E4E4E4' ]

    " set terminal colors
    highlight Terminal guibg='#282828'
    highlight Terminal guifg='#ebdbb2'
else
    set background=dark
    "colorscheme habamax
    "colorscheme onedark
    "colorscheme xoria256
    "colorscheme PaperColor
    let g:seoul256_background=236 | colorscheme seoul256
endif

" vifm plugin
let g:loaded_netrw       = 1
let g:loaded_netrwPlugin = 1
"let g:vifm_replace_netrw = 1
"let g:vifm_embed_term = 1
"let g:vifm_embed_split = 1
"nnoremap - :Vifm<CR>
"nnoremap _ :SplitVifm<CR>

"let g:vcm_direction = 'p'
let g:indentLine_enabled = 0
"autocmd FileType markdown let b:indentLine_enabled = 0

augroup dirvish_config
    autocmd!

    " sort directories to the top
    let g:dirvish_mode = ':sort ,^.*[\/],'

    command! -nargs=? -complete=dir Explore Dirvish <args>
    command! -nargs=? -complete=dir Sexplore leftabove split | silent Dirvish <args>
    command! -nargs=? -complete=dir Vexplore leftabove vsplit | silent Dirvish <args>

    " vifm style navigation
    autocmd FileType dirvish nnoremap <silent><buffer> h <Plug>(dirvish_up)
    autocmd FileType dirvish nnoremap <silent><buffer> l <Cmd>call dirvish#open('edit',0)<CR>
    autocmd FileType dirvish nnoremap <silent><buffer> - <Plug>(dirvish_quit)

    " hide dot-prefixed files
    autocmd FileType dirvish silent keeppatterns g@\v/\.[^\/]+/?$@d _
    "To un-hide, just undo. To hide again, reload with `R`

augroup END
"""""""""""""""""""""""""""""""""

"navigate around window splits with single key combo
"nnoremap <silent> <C-k> :wincmd k<CR>
"nnoremap <silent> <C-j> :wincmd j<CR>
"nnoremap <silent> <C-h> :wincmd h<CR>
"nnoremap <silent> <C-l> :wincmd l<CR>

nnoremap Y  y$
nnoremap ' `

" Use CTRL-L to clear the highlighting of 'hlsearch' and call :diffupdate.
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

" Close current buffer but keep window open
nnoremap <F2> :b#<bar>bd#<CR>

set wildcharm=<C-z>
" Press <Ctrl-7> to switch buffer
"nnoremap <C-_> :b <C-z>

" find word under cursor
nnoremap <F3> :execute "vim /\\<" .expand('<cword>') . "\\>/j **" <BAR> cw<CR>


let mapleader=" "
nnoremap <leader>w :w<CR>

nnoremap <leader>b :b <C-z>
nnoremap <leader>B :ls <bar>:b<Space>

"find file relatively to location of current file
nnoremap <leader>f :find %:h/**/*
nnoremap <leader>V :vimgrep //j %<bar>cw<S-Left><S-Left><Right>
nnoremap <leader>v :vimgrep //j **/*<bar>cw<S-Left><S-Left><Right>
nnoremap <leader>G :grep! "" %<bar>cw<S-left><Left><Left>
nnoremap <leader>g :grep! "" <bar>cw<S-left><Left><Left>

nnoremap <silent> <leader>q :call utils#toggle_quickfix()<cr>

inoremap <f9> <c-o>:call utils#toggle_hebrew()<cr>
nnoremap <f9> :call utils#toggle_hebrew()<cr>


" completion
" -------------------------------------------
" Pressing enter will close the completion window
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" omnicompletion
" -------------------------------------------
" from here: https://stackoverflow.com/questions/510503/ctrlspace-for-omni-and-keyword-completion-in-vim
"  Version 1
inoremap <expr> <C-Space> pumvisible() \|\| &omnifunc == '' ?
\ "\<lt>C-n>" :
\ "\<lt>C-x>\<lt>C-o><c-r>=pumvisible() ?" .
\ "\"\\<lt>c-n>\\<lt>c-p>\\<lt>c-n>\" :" .
\ "\" \\<lt>bs>\\<lt>C-n>\"\<CR>"
imap <C-@> <C-Space>

"  Version 2
" inoremap <expr> <C-Space> complete#Auto_complete_string()
" " this one is for gvim
" inoremap <expr> <Nul> complete#Auto_complete_string()

" Snippets
nnoremap _cmake :-1read $HOME/.vim/snippets/CMakeLists.txt<CR>3jwf>a
